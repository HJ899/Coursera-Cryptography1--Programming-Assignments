#!/usr/bin/env python
# coding: utf-8
import gmpy2

gmpy2.get_context().precision = 1024

def factor(A, N): # Assuming A = (p + q)/2 ## Function to be used in Q1,Q2.
    A_square = int(gmpy2.ceil(gmpy2.square(A)))
    x = int(gmpy2.ceil(gmpy2.sqrt(A_square - N)))
    p = A + x
    q = A - x
    return q if p*q == N else -1

def int_to_bytes(value, length): ## Function to be used in Q4.
    result = []
    for i in range(0, length):
        result.append(value >> (i * 8) & 0xff)
    result.reverse()
    return bytes(result)

# Q1 (Given  : |p - q| < 2*N^0.25)

N1 = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
A1 = int(gmpy2.ceil(gmpy2.sqrt(N1)))
print("Ans 1. : %d"%factor(A1, N1))

# Q2 (Given : |p - q| < 2^11 * N^0.25)

N2 = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877
A2 = int(gmpy2.ceil(gmpy2.sqrt(N2)))
for i in range(2**20):
    q = factor(A2 + i, N2)
    if q != -1: 
        print("Ans 2. : %d"%q)
        break

# Q3 (Given : |3p - 2q| < N^0.25)

N3 = 720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929
A3 = gmpy2.ceil(gmpy2.sqrt(6*N3)) - 0.5
x3 = gmpy2.sqrt(A3*A3 - 6*N3)
p3 = int((A3 - x3)/3)
q3 = int((A3 + x3)/2)
print("Ans 3. : %d"%p3)

# Q4 - Decrypt the given Cipher assuming N from question 1 and PKCS encryption scheme

CIPHER = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540
N = N1
q = factor(A1, N1)
p = N//q
phiN = N - p - q + 1
e = 65537
d = int(gmpy2.divm(1, e, phiN))

M_in_decimal = int(gmpy2.powmod(CIPHER, d, N))
M_bts = int_to_bytes(M_in_decimal, 128)
i = 0
while M_bts[i] != 0: i += 1
Message = M_bts[i+1:]

print("Ans 4. : " + Message.decode('utf-8'))

